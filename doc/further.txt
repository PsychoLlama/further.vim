*further* follows JavaScript imports to their source

Author:   Jesse Gibson <Jesse_Gibson@me.com>
Homepage: https://github.com/PsychoLlama/further.vim
License:  MIT
Tags: *further.vim*

==============================================================================
CONTENTS                                                           *further-toc*

  1. Overview                                                 |further-overview|
  2. Mappings                                                 |further-mappings|
  3. Configuration                                       |further-configuration|
  4. Advanced                                                 |further-advanced|
  5. Changelog                                               |further-changelog|

==============================================================================
1. Overview                                                   *further-overview*

Vim has this thing built in: `gf`. It's super fancy. The text under your
cursor is treated as a file path and opened in the same pane. When you've got
a lot of imports, it can be a life saver.

Not everything is a relative file import though. What about this? >

  import React from 'react'
<
That doesn't make much sense to vim. Luckily, it has another feature, |path|.
It instructs vim which folders to look in when resolving `gf` file paths.
But it ain't that simple. Resolving a module means finding it's folder,
looking in the package.json for the `main` field, and opening that file... and
that's ignoring how projects often have multiple versions of the same
libraries, nested `node_modules` folders, and symlinks everywhere.

That's where `further` shines. It replaces the built-in `gf` mapping with the
JS module resolution algorithm, letting you navigate the maze of modules with
ease.

==============================================================================
2. Mappings                                                   *further-mappings*

  `gf`         Locate the file being imported and open it in the current pane
  <C-w>`gf`    Open the module in a new tab
  <C-w>`f`     Open the module in a new horizontal split
  <C-w><C-f> Same as <C-w>`f`

Example: >
                             cursor
                               â–¼
  import { createStore } from '|redux'
  (keypress) gf
  Vim edits "<root>/node_modules/redux/lib/index.js"
<
All mappings work in visual mode. Whatever text is selected is treated as the
import path.

==============================================================================
3. Configuration                                         *further-configuration*

------------------------------------------------------------------------------
ES Modules                                            *g:further#prefer_modules*

Some packages support a `pkg.module` field in addition to `pkg.main` meant for
exporting ES Module friendly code. If you're working with Webpack 3 or greater
(or Rollup), your bundler will prefer the `pkg.module` entry point, so wherever
further takes you might not be the same file that gets imported.

Further supports the `module` field, but it's opt-in. Put this in your vimrc
to enable it:
>
  let g:further#prefer_modules = v:true

When enabled, further checks `pkg.module`, `pkg.jsnext:main`, and falls back to
`pkg.main`.

------------------------------------------------------------------------------
Custom File Extensions                                    *g:further#extensions*

Some extensions are implied when importing, like `.js` and `.json`, and don't
need to be explicitly stated. Further tries to support all the common
extensions so most apps will work out of the box. Here's what it checks, in
order:
- .js
- .json
- .mjs
- .node
- .jsx
- .ts
- .tsx

You can add more extensions with the `g:further#extensions` variable.
>
  " Registers .css and .vue extensions.
  let g:further#extensions = ['.css', '.vue']

Now, supposing you have a file `grid.css`, further can resolve paths without
the extension:
>
  import grid from './grid'

==============================================================================
4. Advanced                                                   *further-advanced*

It's possible to transform a file path before opening it. A perfect use-case
is monorepos, where the import will direct you to compiled code. You don't
like reading compiled code. Why should you? The source is right there!

By defining the function `g:FurtherMapModuleName` you can intercept and
transform a file path before it opens. Here's how you'd use it for a monorepo:
>
  project
    package.json
    packages/
      utilities/
        package.json
        src/
        dist/
      app/
        package.json
        src/
          index.js

  // In App's index.js
  // This will direct us to ../../utilities/dist/index.js
  // We want to replace dist/ with src/
  import utils from '@project/utilities'
<
The function accepts two arguments:
    1. The absolute path to the file (`/Users/<name>/project/...`)
    2. How it was imported (`utilities`)

Whatever the function returns is the file path that's edited. Since we only
want to transform module paths in the same monorepo, just return the first
argument unchanged by default.
>
  " Don't worry about the syntax. Vimscript is weird.
  function! g:FurtherMapModuleName(resolved, import_name)
    return a:resolved
  endfunction
<
From there you can add in conditions. We want to intercept anything containing
the word `@project` in the import, so let's start there...
>
  function! g:FurtherMapModuleName(resolved, import_name)

    " This tests the import path against a case-sensitive regular expression.
    if a:import_name =~# '@project'

      " Replace the word `/dist` with `/src`.
      return substitute(a:resolved, '/dist', '/src', '')
    endif

    return a:resolved
  endfunction
<
Tada! Now `gf` will direct you to the source code when operating on
`@project/...` imports.

You'll probably need to tweak the function to work with your codebase, but not
by much.

==============================================================================
5. Changelog                                                 *further-changelog*

0.1.0
Initial release

0.2.0
Changed:
- The module name is extracted differently, behaving more like the built-in
  `gf` mapping. Previously it would look for the next string and extract the
  contents. Now it grabs everything under the cursor which looks like a
  module name or relative file path.

Added:
- Support for .json files.
- Support for `gf` and `<C-w>gf` in visual mode.

0.2.1
Added:
- New mapping `<C-w>f` to open the module in a split.

0.2.2
Added:
- Two new mappings: `<C-w><C-f>` in normal and visual mode. They do the same
  thing as `<C-w>f` (see |CTRL-W_CTRL-F| for more details).

==============================================================================
vim: ft=help tw=78:
